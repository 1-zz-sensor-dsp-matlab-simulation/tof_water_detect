clc
clear
close all


tofampdpsf = load('tofdsps1.mat');
length = size(tofampdpsf);




% figure(1)
% hold on
% plot(rpm_raw,'r')

% 使用限幅滤波，过滤异常值
% abnormal_cnt = 0;
% for i = 2:length
%     if(((abs(rpm_filter(i)- rpm_filter(i - 1 - abnormal_cnt))) > ( rpm_filter(i - 1 - abnormal_cnt)*0.4 )) && (rpm_filter(i -1 - abnormal_cnt) > 10000))
%         rpm_filter(i) = rpm_filter(i - 1 - abnormal_cnt);
%         abnormal_cnt = abnormal_cnt + 1;
%     else 
%         abnormal_cnt = 0;
%     end
% end
% 
% 
% plot(rpm_filter,'b')
% hold off
% legend("raw","filter")

% length = 20000
%  中位值平均滤波法（又称防脉冲干扰平均滤波法）（算法1）
% FILTER_N = 100
% filter_windows=4
% m =1
% for n = 1:FILTER_N:length
%   filter_temp = 0;
%   filter_sum = 0;
%   filter_buf(FILTER_N) = 0;
%   for i = 1:FILTER_N
%       filter_buf(i) =  motor_front_right(n)
%       n = n+1;          
%   end
%   % 采样值从小到大排列（冒泡法）
%   for j =1 :FILTER_N-1
%       for i = 1:FILTER_N -1-j
%           if filter_buf(i) > filter_buf(i+1)
%                  filter_temp = filter_buf(i);
%                  filter_buf(i) = filter_buf(i+1)
%                  filter_buf(i+1) = filter_temp;
%           end
%       end
%   end
%   sort(filter_buf)
%   %去除最大最小极值后求平均
%   for i = filter_windows : FILTER_N - filter_windows
%       motor_takeout_abnormal(m) = motor_takeout_abnormal(m) + filter_buf(i)/(FILTER_N- 2* filter_windows)
%   end
%   m=m+1
% end
% 
% figure(2)
% plot(motor_takeout_abnormal,'b')

% 中值滤波
rpm_raw = motor_front_right;
rpm_filter = zeros(length,1);
window_size = 11;
window_data = zeros(window_size,1);
for i = 1:length
    if i <= window_size
        rpm_filter(i) = rpm_raw(i);
        window_data(i) = rpm_raw(i);
    else
        window_data(1:window_size-1) = window_data(2:window_size);
        window_data(window_size) = rpm_raw(i);
        rpm_filter(i) = GetMedianNum(window_data,window_size);
    end
end

figure
hold on
plot(rpm_raw)
plot(rpm_filter)
hold off
legend("raw","filter")

function mid_data = GetMedianNum(bArray,window_size)
bsort = sort(bArray,"ascend");
if mod(window_size , 2) ~= 0
    mid_data = bsort((window_size+1) / 2);
else
    mid_data = (bsort(window_size/2) + bsort(window_size/2+1)) / 2;
end
end





